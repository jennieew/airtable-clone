generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  bases         Base[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Base {
  baseId     String   @id @default(cuid())
  name       String   @default("Untitled base")
  createdAt  DateTime @default(now())
  authorId   String
  tableCount Int      @default(0)
  author     User     @relation(fields: [authorId], references: [id])
  tables     Table[]

  @@index([name])
}

model Table {
  tableId     String   @id @default(cuid())
  baseId      String
  authorId    String
  name        String
  currentView String
  viewCount   Int      @default(1)
  columns     Column[]
  rows        Row[]
  base        Base     @relation(fields: [baseId], references: [baseId], onDelete: Cascade)
  views       View[]
}

model Row {
  rowId    String @id @default(cuid())
  tableId  String
  authorId String
  order    Int    @default(0)
  values   Cell[]
  table    Table  @relation(fields: [tableId], references: [tableId], onDelete: Cascade)
}

model Column {
  columnId String     @id @default(cuid())
  name     String
  type     ColumnType
  order    Int        @default(0)
  tableId  String
  authorId String
  values   Cell[]
  table    Table      @relation(fields: [tableId], references: [tableId], onDelete: Cascade)
}

model Cell {
  cellId      String  @id @default(cuid())
  rowId       String
  columnId    String
  stringValue String?
  numberValue Float?
  column      Column  @relation(fields: [columnId], references: [columnId], onDelete: Cascade)
  row         Row     @relation(fields: [rowId], references: [rowId], onDelete: Cascade)
}

model View {
  viewId       String    @id @default(cuid())
  tableId      String
  name         String
  description  String    @default("")
  hiddenFields String    @default("")
  filters      Json[]    @default([])
  groupBy      String    @default("")
  sort         String    @default("")
  color        String    @default("")
  rowHeight    RowHeight @default(SHORT)
  table        Table     @relation(fields: [tableId], references: [tableId], onDelete: Cascade)
}

enum ColumnType {
  STRING
  NUMBER
}

enum RowHeight {
  SHORT
  MEDIUM
  TALL
  EXTRA_TALL
}
